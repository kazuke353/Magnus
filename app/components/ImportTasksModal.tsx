import { useState, useRef, useEffect } from "react";
import { FiUpload, FiCopy, FiX, FiCheck, FiAlertTriangle, FiMessageSquare, FiRepeat, FiInfo } from "react-icons/fi";
import Button from "./Button";
// Assuming Card, formatDate, formatDateWithDay, Tooltip are correctly imported from their paths
// import Card from "./Card";
import { formatDate, formatDateWithDay } from "~/utils/formatters"; // Adjust path as needed
import Tooltip from "./Tooltip"; // Adjust path as needed

interface ImportTasksModalProps {
  onClose: () => void;
  onImport: (tasks: any[]) => void; // Keep 'any[]' for flexibility, or define a strict Task type
  isImporting: boolean;
}

// Helper function to strip code blocks from imported text
const stripCodeBlocks = (text: string): string => {
  if (!text) return "";
  // This regex removes markdown code blocks and inline code
  return text.replace(/```(?:[a-zA-Z0-9]*\n)?(.*?)```/gs, "$1")
            .replace(/`(.*?)`/g, "$1")
            .trim();
};

export default function ImportTasksModal({
  onClose,
  onImport,
  isImporting
}: ImportTasksModalProps) {
  const [jsonText, setJsonText] = useState<string>("");
  const [parseError, setParseError] = useState<string | null>(null);
  const [promptCopied, setPromptCopied] = useState(false);
  const textAreaRef = useRef<HTMLTextAreaElement>(null);
  const promptRef = useRef<HTMLTextAreaElement>(null);
  const modalRef = useRef<HTMLDivElement>(null);

  // Close modal when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (modalRef.current && !modalRef.current.contains(event.target as Node)) {
        onClose();
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [onClose]);

  // Handle escape key press
  useEffect(() => {
    const handleEscapeKey = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('keydown', handleEscapeKey);
    return () => {
      document.removeEventListener('keydown', handleEscapeKey);
    };
  }, [onClose]);


  const handleTextChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setJsonText(e.target.value);
    setParseError(null); // Clear error on text change
  };

  const handleImport = () => {
    if (!jsonText.trim()) {
      setParseError("Please paste the JSON data generated by the AI assistant.");
      return;
    }

    try {
      // Strip code blocks before parsing
      const cleanedJson = stripCodeBlocks(jsonText);
      const parsedData = JSON.parse(cleanedJson);

      if (!Array.isArray(parsedData)) {
        throw new Error("Imported data must be a valid JSON array of task objects.");
      }

      // Basic validation for each task object
      parsedData.forEach((task, index) => {
        if (typeof task !== 'object' || task === null) {
          throw new Error(`Item at index ${index} is not a valid object.`);
        }
        if (!task.title || typeof task.title !== 'string' || task.title.trim() === "") {
          throw new Error(`Task at index ${index} is missing a valid 'title' (string).`);
        }

        // Validate recurring structure if present
        if (task.recurring) {
          if (typeof task.recurring !== 'object' || task.recurring === null) {
             throw new Error(`Task at index ${index} has an invalid 'recurring' field (must be an object).`);
          }
          if (!task.recurring.frequency || typeof task.recurring.frequency !== 'string') {
            throw new Error(`Recurring task at index ${index} is missing a 'frequency' (string).`);
          }
          const validFrequencies = ["daily", "weekly", "monthly", "yearly"];
          if (!validFrequencies.includes(task.recurring.frequency.toLowerCase())) {
            throw new Error(`Recurring task at index ${index} has an invalid frequency: '${task.recurring.frequency}'. Must be one of: ${validFrequencies.join(', ')}.`);
          }
          // Add more specific recurring validations if needed (e.g., interval is number, daysOfWeek format)
        }

        // Optional: Validate other fields if needed (e.g., dueDate format, priority values)
        if (task.dueDate && !/^\d{4}-\d{2}-\d{2}$/.test(task.dueDate)) {
            console.warn(`Task at index ${index} has a dueDate ('${task.dueDate}') that might not be in YYYY-MM-DD format.`);
            // Decide if this should be a hard error or just a warning
            // throw new Error(`Task at index ${index} has an invalid 'dueDate' format. Expected YYYY-MM-DD.`);
        }
         if (task.priority && !["low", "medium", "high"].includes(task.priority.toLowerCase())) {
             console.warn(`Task at index ${index} has an unrecognized priority ('${task.priority}'). Allowed: low, medium, high.`);
             // Decide if this should be a hard error or just a warning
             // throw new Error(`Task at index ${index} has an invalid 'priority'. Expected 'low', 'medium', or 'high'.`);
         }
      });

      onImport(parsedData);
    } catch (error) {
      // Provide more context in the error message
      let message = "Failed to parse JSON. Please ensure it's a valid JSON array.";
      if (error instanceof SyntaxError) {
        message = `Invalid JSON syntax: ${error.message}. Check for missing commas, quotes, or brackets.`;
      } else if (error instanceof Error) {
        message = `Validation Error: ${error.message}.`;
      } else {
        message = `An unexpected error occurred: ${String(error)}`;
      }
      setParseError(message);
    }
  };


  const handleCopyPrompt = async () => {
    if (promptRef.current) {
      try {
        await navigator.clipboard.writeText(promptRef.current.value);
        setPromptCopied(true);
        setTimeout(() => setPromptCopied(false), 2000);
      } catch (error) {
        console.error("Failed to copy prompt:", error);
        // Optionally show an error message to the user
      }
    }
  };

  // Get current date and format it
  const currentDate = new Date();
  // Assuming formatDate gives "Month Day, Year" e.g., "March 30, 2025"
  const formattedDate = formatDate(currentDate.toISOString());
  // Assuming formatDateWithDay gives "Day, Month Day, Year" e.g., "Sunday, March 30, 2025"
  const formattedDateWithDay = formatDateWithDay(currentDate.toISOString());
  // YYYY-MM-DD format
  const isoDate = currentDate.toISOString().split('T')[0];

  // --- Start of Revised LLM Prompt ---
  const llmPrompt = `Act as an expert task management assistant. Your goal is to analyze the list of raw, unstructured tasks provided below and convert them into a structured JSON array. You need to intelligently interpret each task and decide on the appropriate values for its properties.

Today's date is ${formattedDateWithDay} (${isoDate}). Use this as a reference for interpreting time-sensitive tasks.

For each raw task, determine and assign the following properties:
1.  **title** (string, required): A concise and clear action item derived from the raw task.
2.  **description** (string, optional): Add context, clarify the objective, or include details mentioned in the raw task. Be helpful! If the raw task is simple, this might be empty.
3.  **dueDate** (string, optional, format: YYYY-MM-DD): Infer a realistic due date.
    * Look for specific dates or relative terms (e.g., "tomorrow", "next Wednesday", "end of month", "April 15th"). Calculate the date based on today (${isoDate}).
    * If urgency is implied ("ASAP", "urgent", "immediately") but no date is given, set it to today (${isoDate}) or tomorrow.
    * If the task seems routine but lacks a specific date, you might leave this null or make a reasonable guess (e.g., a generic "review report" might be due in a few days).
    * Leave null if no timeframe is implied or discernible.
4.  **priority** (string, "low", "medium", or "high", default: "medium"): Assess the task's importance.
    * Use "high" for tasks mentioning urgency, critical deadlines, or important events (e.g., "pay rent", "submit proposal", "urgent fix").
    * Use "low" for non-time-sensitive items or background tasks (e.g., "read industry article sometime", "organize files").
    * Default to "medium" for standard tasks.
5.  **category** (string, optional): Assign a relevant category.
    * Infer from keywords (e.g., "meeting", "report", "client" -> "Work"; "groceries", "laundry", "appointment" -> "Personal"; "pay", "invoice", "budget", "bank" -> "Finance" or "Bills"; "gym", "doctor" -> "Health"; "call mom" -> "Social").
    * Try to group similar tasks logically. Use generic categories if unsure (e.g., "General", "Task").
6.  **amount** (number, optional): If the task clearly involves a specific sum of money (e.g., "Pay electricity bill $55.30", "Invoice client for 1200 BGN"), extract the numeric value. Omit the currency symbol.

**Recurring Tasks:**
Carefully identify tasks that imply repetition. Look for keywords like "daily", "weekly", "monthly", "annually", "every Tuesday", "pay X bill", "submit weekly report". If a task seems recurring, include a "recurring" object with:
1.  **frequency** (string, required): "daily", "weekly", "monthly", or "yearly".
2.  **interval** (number, optional, default: 1): The number of frequency units between occurrences (e.g., frequency: "weekly", interval: 2 means every 2 weeks).
3.  **daysOfWeek** (string, optional): For "weekly" frequency, a comma-separated list of day numbers (1=Monday, 2=Tuesday, ..., 7=Sunday). E.g., "1,3,5" for Mon, Wed, Fri.
4.  **dayOfMonth** (number, optional): For "monthly" or "yearly" frequency, the day of the month (1-31).
5.  **monthOfYear** (number, optional): For "yearly" frequency, the month number (1-12).
6.  **occurrences** (number, optional): The total number of times the task should occur.
7.  **endDate** (string, optional, format: YYYY-MM-DD): The date after which the task should stop recurring.

**Expected JSON Output Structure:**
\`\`\`json
[
  {
    "title": "Submit project proposal",
    "description": "Finalize and email the proposal document to the client.",
    "dueDate": "${isoDate}", // Example: Inferred as urgent/today
    "priority": "high",
    "category": "Work"
  },
  {
    "title": "Pay Rent",
    "description": "Monthly rent payment for Apartment.",
    "dueDate": "2025-04-01", // Example: Inferred next month's due date
    "priority": "high",
    "category": "Bills",
    "amount": 1200, // Example: Amount extracted
    "recurring": {
      "frequency": "monthly",
      "interval": 1,
      "dayOfMonth": 1
    }
  },
  {
    "title": "Weekly team sync",
    "description": "Attend the regular Monday team meeting.",
    "priority": "medium",
    "category": "Work",
    "recurring": {
      "frequency": "weekly",
      "interval": 1,
      "daysOfWeek": "1" // Monday
    }
  },
  {
    "title": "Grocery Shopping",
    "priority": "medium",
    "category": "Errands"
     // Example: No due date or recurrence inferred
  }
]
\`\`\`

**Instructions:**
1.  Analyze the raw task list provided below.
2.  Make intelligent decisions to populate the fields for each task based on the guidelines above.
3.  Format the output STRICTLY as a valid JSON array.
4.  Do NOT include any explanations, commentary, or text outside the JSON array itself. Just provide the pure JSON.

**Here are the raw tasks:**
[PASTE YOUR TASKS HERE, ONE PER LINE OR AS A PARAGRAPH]
`;
  // --- End of Revised LLM Prompt ---

  return (
    // Modal JSX remains the same as in your original code
    // Ensure all imports like Button, Tooltip, FiIcons are correct
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50 p-4 transition-opacity duration-300 ease-in-out">
        <div
          ref={modalRef}
          className="w-full max-w-2xl max-h-[90vh] overflow-y-auto bg-white dark:bg-gray-800 rounded-xl shadow-xl border border-gray-200 dark:border-gray-700 transition-all duration-300 ease-in-out flex flex-col" // Added flex flex-col
        >
          {/* Header */}
          <div className="flex justify-between items-center p-4 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
            <h2 className="text-xl font-bold text-gray-900 dark:text-gray-100">
              Import Tasks via AI
            </h2>
            <button
              onClick={onClose}
              className="text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 rounded-full p-1 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
              aria-label="Close modal"
            >
              <FiX className="h-5 w-5" />
            </button>
          </div>

          {/* Scrollable Content Area */}
          <div className="p-4 space-y-4 overflow-y-auto">
            {/* AI Prompt Section */}
            <div className="bg-blue-50 dark:bg-blue-900/20 border-l-4 border-blue-500 p-4 rounded-md">
              <div className="flex">
                <FiMessageSquare className="h-5 w-5 text-blue-500 mr-3 flex-shrink-0 mt-0.5" />
                <div>
                  <p className="text-sm font-medium text-blue-800 dark:text-blue-300 mb-2">
                    Step 1: Use an AI to structure your tasks
                  </p>
                  <p className="text-sm text-blue-700 dark:text-blue-400 mb-3">
                    Copy the prompt below. Paste it into your preferred AI assistant (like ChatGPT, Gemini, Claude) along with your raw task list where indicated.
                  </p>
                  <div className="relative mb-2">
                    <textarea
                      ref={promptRef}
                      className="w-full h-36 p-3 text-xs border border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700 text-gray-900 dark:text-gray-100 font-mono resize-none" // Added resize-none
                      readOnly
                      value={llmPrompt}
                      aria-label="AI Prompt for Task Structuring"
                    />
                    <Button
                      size="sm"
                      variant="secondary" // Use a secondary style
                      className="absolute top-2 right-2"
                      onClick={handleCopyPrompt}
                      aria-label={promptCopied ? "Prompt Copied" : "Copy Prompt"}
                    >
                      {promptCopied ? (
                        <>
                          <FiCheck className="mr-1 h-4 w-4" />
                          Copied!
                        </>
                      ) : (
                        <>
                          <FiCopy className="mr-1 h-4 w-4" />
                          Copy Prompt
                        </>
                      )}
                    </Button>
                  </div>
                   <p className="text-xs text-blue-600 dark:text-blue-500">
                     Remember to replace "[PASTE YOUR TASKS HERE...]" in the prompt with your actual tasks.
                   </p>
                </div>
              </div>
            </div>

             {/* Paste JSON Section */}
             <div className="mt-4">
                <div className="flex items-center space-x-2 mb-1">
                    <label htmlFor="json-input" className="block text-sm font-medium text-gray-700 dark:text-gray-300">
                    Step 2: Paste the AI's JSON Response
                    </label>
                    <Tooltip content="Paste the entire JSON array generated by the AI assistant here. Ensure it starts with '[' and ends with ']'.">
                    <span className="text-gray-500 cursor-help">
                        <FiInfo size={16} />
                    </span>
                    </Tooltip>
                </div>
                <textarea
                    id="json-input"
                    ref={textAreaRef}
                    className="w-full h-48 p-3 border border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 font-mono text-sm focus:ring-blue-500 focus:border-blue-500" // Added focus styles
                    placeholder='Paste the JSON output from the AI here. It should look similar to this example:
[
  {
    "title": "Example Task",
    "description": "Generated by AI",
    "dueDate": "2025-04-15",
    "priority": "medium",
    "category": "Example"
  },
  {
    "title": "Example Recurring Task",
    "category": "Example",
    "recurring": {
      "frequency": "weekly",
      "daysOfWeek": "1"
    }
  }
]'
                    value={jsonText}
                    onChange={handleTextChange}
                    aria-label="Paste JSON Task Data Here"
                    aria-describedby="json-error-message" // Link error message
                />
             </div>

            {/* Recurring Task Info Box */}
            <div className="bg-yellow-50 dark:bg-yellow-900/20 border-l-4 border-yellow-500 p-3 rounded-md">
                <div className="flex">
                <FiRepeat className="h-5 w-5 text-yellow-600 dark:text-yellow-500 mr-2 flex-shrink-0 mt-0.5" />
                <p className="text-sm text-yellow-800 dark:text-yellow-300">
                    <strong>Recurring Tasks:</strong> The AI can identify recurring patterns (daily, weekly, monthly, yearly). Ensure the generated JSON includes a "recurring" object with at least the "frequency" field for these tasks.
                </p>
                </div>
            </div>

            {/* Parse Error Display */}
            {parseError && (
                <div id="json-error-message" role="alert" className="bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 p-4 rounded-md">
                <div className="flex">
                    <FiAlertTriangle className="h-5 w-5 text-red-500 dark:text-red-400 mr-2 flex-shrink-0" />
                    <p className="text-sm text-red-700 dark:text-red-300">{parseError}</p>
                </div>
                </div>
            )}
          </div>

          {/* Footer Actions */}
          <div className="flex justify-end space-x-3 p-4 border-t border-gray-200 dark:border-gray-700 flex-shrink-0">
            <Button variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button
              onClick={handleImport}
              isLoading={isImporting}
              disabled={!jsonText.trim() || isImporting || !!parseError} // Disable if importing, no text, or error exists
              aria-disabled={!jsonText.trim() || isImporting || !!parseError}
            >
              <FiUpload className="mr-2 h-4 w-4" />
              {isImporting ? 'Importing...' : 'Import Tasks'}
            </Button>
          </div>
        </div>
    </div>
  );
}

// Remember to define or import Button, Tooltip, formatDate, formatDateWithDay
// Example placeholder for Button:
const Button = ({ children, onClick, variant, size, className, isLoading, disabled }: any) => (
  <button onClick={onClick} className={`button ${variant} ${size} ${className}`} disabled={disabled || isLoading}>
    {isLoading ? 'Loading...' : children}
  </button>
);

// Example placeholder for Tooltip:
// const Tooltip = ({ children, content }: any) => (
//   <span title={content}>{children}</span> // Basic tooltip, replace with your actual component
// );